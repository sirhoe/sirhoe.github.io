<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | SIRHOE CODE]]></title>
  <link href="http://sirhoe.github.io/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://sirhoe.github.io/"/>
  <updated>2014-09-08T12:42:42+10:00</updated>
  <id>http://sirhoe.github.io/</id>
  <author>
    <name><![CDATA[Sir Hoe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why C# Interface? And When to Use Them.]]></title>
    <link href="http://sirhoe.github.io/blog/2014/09/08/why-interface-and-when-to-use-them/"/>
    <updated>2014-09-08T12:33:42+10:00</updated>
    <id>http://sirhoe.github.io/blog/2014/09/08/why-interface-and-when-to-use-them</id>
    <content type="html"><![CDATA[<blockquote><p><strong>Q: What is a Interface?</strong></p>

<p>A: It has a structure of a Class, contains all the declarations but no implementations.</p></blockquote>

<p><strong>Why? What is the point of a Interface?</strong></p>

<p>It serves as a <em>contract</em> for derived Classes. It dictates a set of public methods that implementing Classes must have, what arguments they get and what they return.</p>

<p><strong>Please explain in non technical jargon, When and How do we use Interface as a contract?</strong></p>

<p>When someone else is going to provide you the implementation later. You get to start working with your own code against a Interface because you already know what to pass in and get out of objectâ€™s methods which must surely exist in Classes that implement the agreed Interface.
When you intend to swap out objects. To allow objects from different Classes to be interchanged, they have to implement the same Interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Practices to Manipulate String in C#]]></title>
    <link href="http://sirhoe.github.io/blog/2014/09/02/best-practices-to-manipulate-string-in-c-number/"/>
    <updated>2014-09-02T21:31:36+10:00</updated>
    <id>http://sirhoe.github.io/blog/2014/09/02/best-practices-to-manipulate-string-in-c-number</id>
    <content type="html"><![CDATA[<p>Manipulating strings is probably the most performed task in programming yet most developer are not doing it efficiently. Developers tend to use the &lsquo;+&rsquo; operand to concatenate strings because it is an easy syntax and they are not aware of better options.</p>

<!--more-->


<h3>In C#, use System.Text.StringBuilder</h3>

<p>Make it a habit to use StringBuilder to manipulate strings because the class is designed to be compiler-optimised and it will avoid memory allocation where possible.</p>

<h3>String is immutable</h3>

<p>Do you know that <em>String</em> type is immutable, which means that it cannot be changed after instantiated. Every time you modify an existing string, a new string is created. Now imagine if you have a loop which append to a string, the .NET runtime have to allocate memory for a new string every time the string is modified. Memory allocation is an expensive operation.</p>

<h3>StringBuilder is mutable and optimised</h3>

<p>To overcome the resource penalty when manipulating string during runtime, StringBuilder is introduced. It&rsquo;s operation is compiler optimised and mutable where possible.</p>

<h3>When to use StringBuilder?</h3>

<p>Understanding the need for easy syntax and readability, I would suggest using StringBuilder whenever you are manipulating string in a loop and performance matters.</p>

<h3>For more reading</h3>

<p><a href="http://msdn.microsoft.com/en-us/library/2839d5h5(v=vs.110">Namespace System.Text.StringBuilder</a>.aspx)</p>

<p><a href="http://www.dotnetperls.com/stringbuilder">StringBuilder Benchmark</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluent NHibernate: One-To-Many Mapping]]></title>
    <link href="http://sirhoe.github.io/blog/2014/09/02/fluentnhibernate-one-to-many-mapping/"/>
    <updated>2014-09-02T10:15:09+10:00</updated>
    <id>http://sirhoe.github.io/blog/2014/09/02/fluentnhibernate-one-to-many-mapping</id>
    <content type="html"><![CDATA[<p>One of the most common NHibernate mapping used is <em>one-to-many</em>, which is slightly more complex than the straight up <em>one-to-one</em>. There are a few things to take note of when we deal with such mapping especially when using FluentNHibernate.</p>

<p>For this demo, I am going to use FluentNHibernate 1.4 and NHibernate 3.3, particulary the <a href="https://github.com/jagregory/fluent-nhibernate/wiki/Fluent-mapping"><em>FluentNHibernate.Mapping.Classmap</em></a> class</p>

<!--more-->


<h3>The database schema</h3>

<p>We are going to use a simple blog database schema, with a <em>Post</em> and <em>Category</em> tale. In this exercise, a <em>post</em> can only have one <em>category</em> while a <em>category</em> can be applied to many <em>post</em>.</p>

<p><img src="/images/one-many-ERD.jpg" title="&lsquo;one category many post&rsquo;" ></p>

<p>The diagram above is intentionally left incomplete without the datatype and other contraints so that we can focus on the relationship.</p>

<p>In order to represent such relationship in C# FluentNHibernate code, we first have to create the entities classes, <em>Post</em> and <em>Category</em>.</p>

<pre><code>public class Post    {
    public virtual int Id { get; set; }
    public virtual string Title { get; set; }
    public virtual Category Category { get; set; }    }

public class Category    {
    public virtual int Id { get; set; }
    public virtual string Name { get; set; }
    public virtual IList&lt;Post&gt; Post { get; set; }    }
</code></pre>

<p>These are just plain old C# class with no relationship yet, that comes later. Even if you are not using Fluent or NHibernate you would still create such classes to store the data you fetch from the database. This entity classes are required no matter which ORM you use or even if you do not use one.</p>

<p>After that, we will create the mapping classes required by FluentNHibernate to represent the relationship in the database. There will be two mapping classes, one for earch entity class.</p>

<pre><code>public class PostMap : ClassMap&lt;Post&gt;    {
    public PostMap()        {
        Id(x =&gt; x.Id); //#1

        Map(x =&gt; x.Title) //#2
            .Length(5000)
            .Not.Nullable();

        References(x =&gt; x.Category) //#3
            .Column("Category");
    } 
}
</code></pre>

<p><em>ClassMap</em> is the basic foundation of all your FluentNHiberate mapping and you will derive from this to map anything.</p>

<h3>Rule 1: ClassMap it in the Contructor</h3>

<p>As you can see from the <em>PostMap</em> class above, all the mappings must be in the Contrsuctor. The mapping says:</p>

<ol>
<li>Table <em>Post</em> Primary key, also known as Id, is mapped to the Id method.</li>
<li>Method <em>Ttitle</em> maximum length is 5000 and it cannot be null. Since the method returns a <em>String</em>, it will be automatically mapped to a <em>nvarchar</em> column</li>
<li>Method <em>Category</em> is a Foreign Key reference tht is mapped to a column named <em>Category</em>. From <em>Post</em> table point of view, it is a one-to-one mapping to <em>Category</em></li>
</ol>


<p>Next we will take a look at the <em>CategoryMap</em></p>

<pre><code>public class CategoryMap : ClassMap&lt;Category&gt;
{
    public CategoryMap()
    {
        Id(x =&gt; x.Id);  //#1 

        Map(x =&gt; x.Name)  //#2
            .Length(50) 
            .Not.Nullable(); 

        HasMany(x =&gt; x.Post) //#3 
            .Inverse() 
            .Cascade.All()
            .KeyColumn("Category"); 
        }
    }
</code></pre>

<p>The #1 and #2 have been explained earlier whereas #3 shows table <em>Category</em> has a <em>Post</em> method. The <em>Inverse</em> method dictates that the relationship must be traced from the other side which is the <em>Post</em> table. The <em>Cascade.All</em> dictates cascade on delete/update, which means leave no orphan. The <em>KeyColumn</em> is just telling FluentNHibernate to look at that column in <em>Post</em> table when tracing the relationship from inverse.</p>

<h3>Rule 2: Inverse at the Many side of the relationship.</h3>

<p>Do not inverse both side unless you know what you are doing. Refer to <a href="http://notherdev.blogspot.com.au/2012/04/nhibernates-inverse-what-does-it-really.html">this excellent exlain</a> for more detail.</p>

<p>Finally with the entity class and mapping completed, we can start working with <em>ISessionFactory</em> to configure the databse. I will cover that in another post.</p>

<h3>Have a question?</h3>

<p>Feel free to leave a comment or email and I will get back to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a MVC Blog Engine Part 1]]></title>
    <link href="http://sirhoe.github.io/blog/2014/08/29/creating-a-mvc-blog-engine-part-1/"/>
    <updated>2014-08-29T16:19:49+10:00</updated>
    <id>http://sirhoe.github.io/blog/2014/08/29/creating-a-mvc-blog-engine-part-1</id>
    <content type="html"><![CDATA[<p>I have been working on a ASP.NET MVC pet project of my own for a while, following tutorial from <a href="http://www.prideparrot.com/blog/archive/2012/12/how_to_create_a_simple_blog_part1">PrideParriot</a> to build a blog engine from scratch. Ultimately, I intend to divert from the tutorial to add more functionalities as I get more comfortable. <!--more--></p>

<p>For the time being, I have completed the user stores below for the blog engine:</p>

<ul>
<li>Story #1 - Display the latest blog posts</li>
<li>Story #2 - Display posts based on category</li>
<li>Story #3 - Display posts based on tag</li>
<li>Story #4 - Search posts</li>
<li>Story #5 - Display the details of a single post</li>
<li>Story #6 - Display the post categories in a widget</li>
<li>Story #7 - Display the post tags in a widget</li>
<li>Story #8 - Display the latest posts in a widget</li>
</ul>


<p>More work needs to be done!</p>

<p><img class="right" src="/images/mvcblog_screenshot.png" title="&lsquo;Blog screenshot&rsquo;" > <img class="right" src="/images/mvcblog_code.png" title="&lsquo;Code&rsquo;" ></p>

<h3>Code hosted in Bitbucket</h3>

<p>The <a href="https://bitbucket.org/sirhoe/blog-engine">source code is hosted in Bitbucket</a> and you are free to fork it but additonal contributor is not required at this moment as I want to go through the tutorial myself.</p>

<h3>Have a question?</h3>

<p>if you faced any issue following the tutorial, I will more than happy to disucss and help.</p>
]]></content>
  </entry>
  
</feed>
