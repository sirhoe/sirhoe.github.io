<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Best Practice | SIRHOE CODE]]></title>
  <link href="http://sirhoe.github.io/blog/categories/best-practice/atom.xml" rel="self"/>
  <link href="http://sirhoe.github.io/"/>
  <updated>2014-09-23T16:54:44+10:00</updated>
  <id>http://sirhoe.github.io/</id>
  <author>
    <name><![CDATA[Sir Hoe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Best Practice to Catch and Rethrow Exception]]></title>
    <link href="http://sirhoe.github.io/blog/2014/09/23/best-practice-to-catch-and-rethrow-exception/"/>
    <updated>2014-09-23T16:46:20+10:00</updated>
    <id>http://sirhoe.github.io/blog/2014/09/23/best-practice-to-catch-and-rethrow-exception</id>
    <content type="html"><![CDATA[<p>Some developers made this mistake when they catch an Exception and later rethrow them.</p>

<pre><code>try {
  // something went wrong here
} catch (Exception ex)
{
    throw ex; //mistake here
}
</code></pre>

<p>How many of you do this? Do you know what is wrong here?</p>

<p>When you code <em>throw ex;</em> you are essentially throwing an except from this point onwards, discarding the original exception and information that you <em>catch</em> earlier. The trace from this point onwards would only go to where you are issuing the <em>throw ex;</em> statement.</p>

<p><strong>What is the correct statement then?</strong></p>

<pre><code>try {
  // something went wrong here
} catch (Exception ex)
{
    throw;
}
</code></pre>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check for Null to Avoid Crashes]]></title>
    <link href="http://sirhoe.github.io/blog/2014/09/12/check-for-null-to-avoid-crashes/"/>
    <updated>2014-09-12T17:01:14+10:00</updated>
    <id>http://sirhoe.github.io/blog/2014/09/12/check-for-null-to-avoid-crashes</id>
    <content type="html"><![CDATA[<p>NullPointerException is one of the most common error to crash an application. Everyone of us made this same mistake, the code runs fine although we did not check for null explicitly before calling <em>toString()</em> when we first code it because all the properties are instantiated during creation. It slips our mind and we checked in the code.</p>

<pre><code>Uri myWebAddress = new Uri(“http://sirhoe.github.io”);
    …  //some flow
Console.Writeline(myWebAddress.toString());
</code></pre>

<p>After awhile, someone else modified the code and now the object’s properties are not instantiated immediate after creation.</p>

<pre><code>Uri myWebAddress = new Uri();
    …  //some flow
Console.Writeline(myWebAddress.toString()); //throws exception
</code></pre>

<p>Now it crashes, because the <em>System.Net.Uri</em> object is null. This is just one example and there are many scenarios where similar error can happen.</p>

<!--more-->


<h3>What should we do?</h3>

<p>Make it a habit to check for null and I feel that the best and most readable way of doing it looks like this.</p>

<pre><code>(myWebAddress ?? string.Empty).toString());
</code></pre>

<p>You will have to make adjustment when adopting this but the whole idea is to make use of the “two question marks” to quickly check for null and give it a default value if its null.</p>

<p>Keep this best practice close to your heart and it will save you a lot of embarrassment down the road.</p>

<p>I hope you find this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why C# Interface? And When to Use Them.]]></title>
    <link href="http://sirhoe.github.io/blog/2014/09/08/why-interface-and-when-to-use-them/"/>
    <updated>2014-09-08T12:33:42+10:00</updated>
    <id>http://sirhoe.github.io/blog/2014/09/08/why-interface-and-when-to-use-them</id>
    <content type="html"><![CDATA[<blockquote><p><strong>Q: What is a Interface?</strong></p>

<p>A: It has a structure of a Class, contains all the declarations but no implementations.</p></blockquote>

<p><strong>Why? What is the point of a Interface?</strong></p>

<p>It serves as a <em>contract</em> for derived Classes. It dictates a set of public methods that implementing Classes must have, what arguments they get and what they return.</p>

<p><strong>Please explain in non technical jargon, When and How do we use Interface as a contract?</strong></p>

<p>When someone else is going to provide you the implementation later. You get to start working with your own code against a Interface because you already know what to pass in and get out of object’s methods which must surely exist in Classes that implement the agreed Interface.
When you intend to swap out objects. To allow objects from different Classes to be interchanged, they have to implement the same Interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Practices to Manipulate String in C#]]></title>
    <link href="http://sirhoe.github.io/blog/2014/09/02/best-practices-to-manipulate-string-in-c-number/"/>
    <updated>2014-09-02T21:31:36+10:00</updated>
    <id>http://sirhoe.github.io/blog/2014/09/02/best-practices-to-manipulate-string-in-c-number</id>
    <content type="html"><![CDATA[<p>Manipulating strings is probably the most performed task in programming yet most developer are not doing it efficiently. Developers tend to use the &lsquo;+&rsquo; operand to concatenate strings because it is an easy syntax and they are not aware of better options.</p>

<!--more-->


<h3>In C#, use System.Text.StringBuilder</h3>

<p>Make it a habit to use StringBuilder to manipulate strings because the class is designed to be compiler-optimised and it will avoid memory allocation where possible.</p>

<h3>String is immutable</h3>

<p>Do you know that <em>String</em> type is immutable, which means that it cannot be changed after instantiated. Every time you modify an existing string, a new string is created. Now imagine if you have a loop which append to a string, the .NET runtime have to allocate memory for a new string every time the string is modified. Memory allocation is an expensive operation.</p>

<h3>StringBuilder is mutable and optimised</h3>

<p>To overcome the resource penalty when manipulating string during runtime, StringBuilder is introduced. It&rsquo;s operation is compiler optimised and mutable where possible.</p>

<h3>When to use StringBuilder?</h3>

<p>Understanding the need for easy syntax and readability, I would suggest using StringBuilder whenever you are manipulating string in a loop and performance matters.</p>

<h3>For more reading</h3>

<p><a href="http://msdn.microsoft.com/en-us/library/2839d5h5(v=vs.110">Namespace System.Text.StringBuilder</a>.aspx)</p>

<p><a href="http://www.dotnetperls.com/stringbuilder">StringBuilder Benchmark</a></p>
]]></content>
  </entry>
  
</feed>
